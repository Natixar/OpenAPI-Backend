# coding: utf-8

"""
    API B2B ADICT V2

    Cette API vous permet de gérer vos droits d'accès aux données des PCE et de consulter leurs données contractuelles, techniques, de consommation publiées / informatives et d'injections publiées.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from grdf_client import schemas  # noqa: F401


class Periode(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        required = {
            "valeur",
        }
        
        class properties:
            valeur = schemas.StrSchema
            date_debut = schemas.DateSchema
            date_fin = schemas.DateSchema
            __annotations__ = {
                "valeur": valeur,
                "date_debut": date_debut,
                "date_fin": date_fin,
            }
    
    valeur: MetaOapg.properties.valeur
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["valeur"]) -> MetaOapg.properties.valeur: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_debut"]) -> MetaOapg.properties.date_debut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_fin"]) -> MetaOapg.properties.date_fin: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["valeur", "date_debut", "date_fin", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["valeur"]) -> MetaOapg.properties.valeur: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_debut"]) -> typing.Union[MetaOapg.properties.date_debut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_fin"]) -> typing.Union[MetaOapg.properties.date_fin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["valeur", "date_debut", "date_fin", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        valeur: typing.Union[MetaOapg.properties.valeur, str, ],
        date_debut: typing.Union[MetaOapg.properties.date_debut, str, date, schemas.Unset] = schemas.unset,
        date_fin: typing.Union[MetaOapg.properties.date_fin, str, date, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Periode':
        return super().__new__(
            cls,
            *args,
            valeur=valeur,
            date_debut=date_debut,
            date_fin=date_fin,
            _configuration=_configuration,
            **kwargs,
        )
