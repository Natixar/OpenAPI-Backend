# coding: utf-8

"""
    API B2B ADICT V2

    Cette API vous permet de gérer vos droits d'accès aux données des PCE et de consulter leurs données contractuelles, techniques, de consommation publiées / informatives et d'injections publiées.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from grdf_client import schemas  # noqa: F401


class DemanderAccesIn(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    informations transmises au service `/pce/{id_pce}/droit_acces`
    """


    class MetaOapg:
        required = {
            "code_postal",
            "role_tiers",
        }
        
        class properties:
            
            
            class role_tiers(
                schemas.EnumBase,
                schemas.StrSchema
            ):
            
            
                class MetaOapg:
                    enum_value_to_name = {
                        "AUTORISE_CONTRAT_FOURNITURE": "AUTORISE_CONTRAT_FOURNITURE",
                        "DETENTEUR_CONTRAT_FOURNITURE, AUTORISE_CONTRAT_INJECTION": "DETENTEUR_CONTRAT_FOURNITURE_AUTORISE_CONTRAT_INJECTION",
                        "DETENTEUR_CONTRAT_INJECTION": "DETENTEUR_CONTRAT_INJECTION",
                    }
                
                @schemas.classproperty
                def AUTORISE_CONTRAT_FOURNITURE(cls):
                    return cls("AUTORISE_CONTRAT_FOURNITURE")
                
                @schemas.classproperty
                def DETENTEUR_CONTRAT_FOURNITURE_AUTORISE_CONTRAT_INJECTION(cls):
                    return cls("DETENTEUR_CONTRAT_FOURNITURE, AUTORISE_CONTRAT_INJECTION")
                
                @schemas.classproperty
                def DETENTEUR_CONTRAT_INJECTION(cls):
                    return cls("DETENTEUR_CONTRAT_INJECTION")
            code_postal = schemas.StrSchema
            raison_sociale = schemas.StrSchema
            nom_titulaire = schemas.StrSchema
            courriel_titulaire = schemas.StrSchema
            numero_telephone_mobile_titulaire = schemas.StrSchema
            date_debut_droit_acces = schemas.DateSchema
            date_fin_droit_acces = schemas.DateSchema
            perim_donnees_conso_debut = schemas.DateSchema
            perim_donnees_conso_fin = schemas.DateSchema
            perim_donnees_inj_debut = schemas.DateSchema
            perim_donnees_inj_fin = schemas.DateSchema
            perim_donnees_contractuelles = schemas.StrSchema
            perim_donnees_techniques = schemas.StrSchema
            perim_donnees_informatives = schemas.StrSchema
            perim_donnees_publiees = schemas.StrSchema
            __annotations__ = {
                "role_tiers": role_tiers,
                "code_postal": code_postal,
                "raison_sociale": raison_sociale,
                "nom_titulaire": nom_titulaire,
                "courriel_titulaire": courriel_titulaire,
                "numero_telephone_mobile_titulaire": numero_telephone_mobile_titulaire,
                "date_debut_droit_acces": date_debut_droit_acces,
                "date_fin_droit_acces": date_fin_droit_acces,
                "perim_donnees_conso_debut": perim_donnees_conso_debut,
                "perim_donnees_conso_fin": perim_donnees_conso_fin,
                "perim_donnees_inj_debut": perim_donnees_inj_debut,
                "perim_donnees_inj_fin": perim_donnees_inj_fin,
                "perim_donnees_contractuelles": perim_donnees_contractuelles,
                "perim_donnees_techniques": perim_donnees_techniques,
                "perim_donnees_informatives": perim_donnees_informatives,
                "perim_donnees_publiees": perim_donnees_publiees,
            }
    
    code_postal: MetaOapg.properties.code_postal
    role_tiers: MetaOapg.properties.role_tiers
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role_tiers"]) -> MetaOapg.properties.role_tiers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["code_postal"]) -> MetaOapg.properties.code_postal: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["raison_sociale"]) -> MetaOapg.properties.raison_sociale: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nom_titulaire"]) -> MetaOapg.properties.nom_titulaire: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["courriel_titulaire"]) -> MetaOapg.properties.courriel_titulaire: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["numero_telephone_mobile_titulaire"]) -> MetaOapg.properties.numero_telephone_mobile_titulaire: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_debut_droit_acces"]) -> MetaOapg.properties.date_debut_droit_acces: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_fin_droit_acces"]) -> MetaOapg.properties.date_fin_droit_acces: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["perim_donnees_conso_debut"]) -> MetaOapg.properties.perim_donnees_conso_debut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["perim_donnees_conso_fin"]) -> MetaOapg.properties.perim_donnees_conso_fin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["perim_donnees_inj_debut"]) -> MetaOapg.properties.perim_donnees_inj_debut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["perim_donnees_inj_fin"]) -> MetaOapg.properties.perim_donnees_inj_fin: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["perim_donnees_contractuelles"]) -> MetaOapg.properties.perim_donnees_contractuelles: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["perim_donnees_techniques"]) -> MetaOapg.properties.perim_donnees_techniques: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["perim_donnees_informatives"]) -> MetaOapg.properties.perim_donnees_informatives: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["perim_donnees_publiees"]) -> MetaOapg.properties.perim_donnees_publiees: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["role_tiers", "code_postal", "raison_sociale", "nom_titulaire", "courriel_titulaire", "numero_telephone_mobile_titulaire", "date_debut_droit_acces", "date_fin_droit_acces", "perim_donnees_conso_debut", "perim_donnees_conso_fin", "perim_donnees_inj_debut", "perim_donnees_inj_fin", "perim_donnees_contractuelles", "perim_donnees_techniques", "perim_donnees_informatives", "perim_donnees_publiees", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role_tiers"]) -> MetaOapg.properties.role_tiers: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["code_postal"]) -> MetaOapg.properties.code_postal: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["raison_sociale"]) -> typing.Union[MetaOapg.properties.raison_sociale, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nom_titulaire"]) -> typing.Union[MetaOapg.properties.nom_titulaire, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["courriel_titulaire"]) -> typing.Union[MetaOapg.properties.courriel_titulaire, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["numero_telephone_mobile_titulaire"]) -> typing.Union[MetaOapg.properties.numero_telephone_mobile_titulaire, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_debut_droit_acces"]) -> typing.Union[MetaOapg.properties.date_debut_droit_acces, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_fin_droit_acces"]) -> typing.Union[MetaOapg.properties.date_fin_droit_acces, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["perim_donnees_conso_debut"]) -> typing.Union[MetaOapg.properties.perim_donnees_conso_debut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["perim_donnees_conso_fin"]) -> typing.Union[MetaOapg.properties.perim_donnees_conso_fin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["perim_donnees_inj_debut"]) -> typing.Union[MetaOapg.properties.perim_donnees_inj_debut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["perim_donnees_inj_fin"]) -> typing.Union[MetaOapg.properties.perim_donnees_inj_fin, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["perim_donnees_contractuelles"]) -> typing.Union[MetaOapg.properties.perim_donnees_contractuelles, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["perim_donnees_techniques"]) -> typing.Union[MetaOapg.properties.perim_donnees_techniques, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["perim_donnees_informatives"]) -> typing.Union[MetaOapg.properties.perim_donnees_informatives, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["perim_donnees_publiees"]) -> typing.Union[MetaOapg.properties.perim_donnees_publiees, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["role_tiers", "code_postal", "raison_sociale", "nom_titulaire", "courriel_titulaire", "numero_telephone_mobile_titulaire", "date_debut_droit_acces", "date_fin_droit_acces", "perim_donnees_conso_debut", "perim_donnees_conso_fin", "perim_donnees_inj_debut", "perim_donnees_inj_fin", "perim_donnees_contractuelles", "perim_donnees_techniques", "perim_donnees_informatives", "perim_donnees_publiees", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        code_postal: typing.Union[MetaOapg.properties.code_postal, str, ],
        role_tiers: typing.Union[MetaOapg.properties.role_tiers, str, ],
        raison_sociale: typing.Union[MetaOapg.properties.raison_sociale, str, schemas.Unset] = schemas.unset,
        nom_titulaire: typing.Union[MetaOapg.properties.nom_titulaire, str, schemas.Unset] = schemas.unset,
        courriel_titulaire: typing.Union[MetaOapg.properties.courriel_titulaire, str, schemas.Unset] = schemas.unset,
        numero_telephone_mobile_titulaire: typing.Union[MetaOapg.properties.numero_telephone_mobile_titulaire, str, schemas.Unset] = schemas.unset,
        date_debut_droit_acces: typing.Union[MetaOapg.properties.date_debut_droit_acces, str, date, schemas.Unset] = schemas.unset,
        date_fin_droit_acces: typing.Union[MetaOapg.properties.date_fin_droit_acces, str, date, schemas.Unset] = schemas.unset,
        perim_donnees_conso_debut: typing.Union[MetaOapg.properties.perim_donnees_conso_debut, str, date, schemas.Unset] = schemas.unset,
        perim_donnees_conso_fin: typing.Union[MetaOapg.properties.perim_donnees_conso_fin, str, date, schemas.Unset] = schemas.unset,
        perim_donnees_inj_debut: typing.Union[MetaOapg.properties.perim_donnees_inj_debut, str, date, schemas.Unset] = schemas.unset,
        perim_donnees_inj_fin: typing.Union[MetaOapg.properties.perim_donnees_inj_fin, str, date, schemas.Unset] = schemas.unset,
        perim_donnees_contractuelles: typing.Union[MetaOapg.properties.perim_donnees_contractuelles, str, schemas.Unset] = schemas.unset,
        perim_donnees_techniques: typing.Union[MetaOapg.properties.perim_donnees_techniques, str, schemas.Unset] = schemas.unset,
        perim_donnees_informatives: typing.Union[MetaOapg.properties.perim_donnees_informatives, str, schemas.Unset] = schemas.unset,
        perim_donnees_publiees: typing.Union[MetaOapg.properties.perim_donnees_publiees, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DemanderAccesIn':
        return super().__new__(
            cls,
            *args,
            code_postal=code_postal,
            role_tiers=role_tiers,
            raison_sociale=raison_sociale,
            nom_titulaire=nom_titulaire,
            courriel_titulaire=courriel_titulaire,
            numero_telephone_mobile_titulaire=numero_telephone_mobile_titulaire,
            date_debut_droit_acces=date_debut_droit_acces,
            date_fin_droit_acces=date_fin_droit_acces,
            perim_donnees_conso_debut=perim_donnees_conso_debut,
            perim_donnees_conso_fin=perim_donnees_conso_fin,
            perim_donnees_inj_debut=perim_donnees_inj_debut,
            perim_donnees_inj_fin=perim_donnees_inj_fin,
            perim_donnees_contractuelles=perim_donnees_contractuelles,
            perim_donnees_techniques=perim_donnees_techniques,
            perim_donnees_informatives=perim_donnees_informatives,
            perim_donnees_publiees=perim_donnees_publiees,
            _configuration=_configuration,
            **kwargs,
        )
