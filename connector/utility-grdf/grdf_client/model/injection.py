# coding: utf-8

"""
    API B2B ADICT V2

    Cette API vous permet de gérer vos droits d'accès aux données des PCE et de consulter leurs données contractuelles, techniques, de consommation publiées / informatives et d'injections publiées.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from grdf_client import schemas  # noqa: F401


class Injection(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            date_debut_injection = schemas.DateSchema
            date_fin_injection = schemas.DateSchema
            flag_retour_zero = schemas.BoolSchema
            volume_brut = schemas.NumberSchema
        
            @staticmethod
            def coeff_calcul() -> typing.Type['CoeffCalcul']:
                return CoeffCalcul
            volume_converti = schemas.NumberSchema
            energie = schemas.NumberSchema
            type_qualif_injection = schemas.StrSchema
            sens_flux_gaz = schemas.StrSchema
            statut_injection = schemas.StrSchema
            journee_gaziere = schemas.DateSchema
            type_injection = schemas.StrSchema
            __annotations__ = {
                "date_debut_injection": date_debut_injection,
                "date_fin_injection": date_fin_injection,
                "flag_retour_zero": flag_retour_zero,
                "volume_brut": volume_brut,
                "coeff_calcul": coeff_calcul,
                "volume_converti": volume_converti,
                "energie": energie,
                "type_qualif_injection": type_qualif_injection,
                "sens_flux_gaz": sens_flux_gaz,
                "statut_injection": statut_injection,
                "journee_gaziere": journee_gaziere,
                "type_injection": type_injection,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_debut_injection"]) -> MetaOapg.properties.date_debut_injection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_fin_injection"]) -> MetaOapg.properties.date_fin_injection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["flag_retour_zero"]) -> MetaOapg.properties.flag_retour_zero: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volume_brut"]) -> MetaOapg.properties.volume_brut: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coeff_calcul"]) -> 'CoeffCalcul': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["volume_converti"]) -> MetaOapg.properties.volume_converti: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["energie"]) -> MetaOapg.properties.energie: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type_qualif_injection"]) -> MetaOapg.properties.type_qualif_injection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sens_flux_gaz"]) -> MetaOapg.properties.sens_flux_gaz: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statut_injection"]) -> MetaOapg.properties.statut_injection: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["journee_gaziere"]) -> MetaOapg.properties.journee_gaziere: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["type_injection"]) -> MetaOapg.properties.type_injection: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date_debut_injection", "date_fin_injection", "flag_retour_zero", "volume_brut", "coeff_calcul", "volume_converti", "energie", "type_qualif_injection", "sens_flux_gaz", "statut_injection", "journee_gaziere", "type_injection", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_debut_injection"]) -> typing.Union[MetaOapg.properties.date_debut_injection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_fin_injection"]) -> typing.Union[MetaOapg.properties.date_fin_injection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["flag_retour_zero"]) -> typing.Union[MetaOapg.properties.flag_retour_zero, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volume_brut"]) -> typing.Union[MetaOapg.properties.volume_brut, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coeff_calcul"]) -> typing.Union['CoeffCalcul', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["volume_converti"]) -> typing.Union[MetaOapg.properties.volume_converti, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["energie"]) -> typing.Union[MetaOapg.properties.energie, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type_qualif_injection"]) -> typing.Union[MetaOapg.properties.type_qualif_injection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sens_flux_gaz"]) -> typing.Union[MetaOapg.properties.sens_flux_gaz, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statut_injection"]) -> typing.Union[MetaOapg.properties.statut_injection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["journee_gaziere"]) -> typing.Union[MetaOapg.properties.journee_gaziere, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["type_injection"]) -> typing.Union[MetaOapg.properties.type_injection, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date_debut_injection", "date_fin_injection", "flag_retour_zero", "volume_brut", "coeff_calcul", "volume_converti", "energie", "type_qualif_injection", "sens_flux_gaz", "statut_injection", "journee_gaziere", "type_injection", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date_debut_injection: typing.Union[MetaOapg.properties.date_debut_injection, str, date, schemas.Unset] = schemas.unset,
        date_fin_injection: typing.Union[MetaOapg.properties.date_fin_injection, str, date, schemas.Unset] = schemas.unset,
        flag_retour_zero: typing.Union[MetaOapg.properties.flag_retour_zero, bool, schemas.Unset] = schemas.unset,
        volume_brut: typing.Union[MetaOapg.properties.volume_brut, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        coeff_calcul: typing.Union['CoeffCalcul', schemas.Unset] = schemas.unset,
        volume_converti: typing.Union[MetaOapg.properties.volume_converti, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        energie: typing.Union[MetaOapg.properties.energie, decimal.Decimal, int, float, schemas.Unset] = schemas.unset,
        type_qualif_injection: typing.Union[MetaOapg.properties.type_qualif_injection, str, schemas.Unset] = schemas.unset,
        sens_flux_gaz: typing.Union[MetaOapg.properties.sens_flux_gaz, str, schemas.Unset] = schemas.unset,
        statut_injection: typing.Union[MetaOapg.properties.statut_injection, str, schemas.Unset] = schemas.unset,
        journee_gaziere: typing.Union[MetaOapg.properties.journee_gaziere, str, date, schemas.Unset] = schemas.unset,
        type_injection: typing.Union[MetaOapg.properties.type_injection, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'Injection':
        return super().__new__(
            cls,
            *args,
            date_debut_injection=date_debut_injection,
            date_fin_injection=date_fin_injection,
            flag_retour_zero=flag_retour_zero,
            volume_brut=volume_brut,
            coeff_calcul=coeff_calcul,
            volume_converti=volume_converti,
            energie=energie,
            type_qualif_injection=type_qualif_injection,
            sens_flux_gaz=sens_flux_gaz,
            statut_injection=statut_injection,
            journee_gaziere=journee_gaziere,
            type_injection=type_injection,
            _configuration=_configuration,
            **kwargs,
        )

from grdf_client.model.coeff_calcul import CoeffCalcul
