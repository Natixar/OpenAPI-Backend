# coding: utf-8

"""
    API B2B ADICT V2

    Cette API vous permet de gérer vos droits d'accès aux données des PCE et de consulter leurs données contractuelles, techniques, de consommation publiées / informatives et d'injections publiées.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from grdf_client import schemas  # noqa: F401


class ListeAccesIn(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    informations transmises au service
    """


    class MetaOapg:
        
        class properties:
            role_tiers = schemas.StrSchema
            id_pce = schemas.StrSchema
            statut_controle_preuve = schemas.StrSchema
            etat_droit_acces = schemas.StrSchema
            __annotations__ = {
                "role_tiers": role_tiers,
                "id_pce": id_pce,
                "statut_controle_preuve": statut_controle_preuve,
                "etat_droit_acces": etat_droit_acces,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["role_tiers"]) -> MetaOapg.properties.role_tiers: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id_pce"]) -> MetaOapg.properties.id_pce: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statut_controle_preuve"]) -> MetaOapg.properties.statut_controle_preuve: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["etat_droit_acces"]) -> MetaOapg.properties.etat_droit_acces: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["role_tiers", "id_pce", "statut_controle_preuve", "etat_droit_acces", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["role_tiers"]) -> typing.Union[MetaOapg.properties.role_tiers, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id_pce"]) -> typing.Union[MetaOapg.properties.id_pce, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statut_controle_preuve"]) -> typing.Union[MetaOapg.properties.statut_controle_preuve, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["etat_droit_acces"]) -> typing.Union[MetaOapg.properties.etat_droit_acces, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["role_tiers", "id_pce", "statut_controle_preuve", "etat_droit_acces", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        role_tiers: typing.Union[MetaOapg.properties.role_tiers, str, schemas.Unset] = schemas.unset,
        id_pce: typing.Union[MetaOapg.properties.id_pce, str, schemas.Unset] = schemas.unset,
        statut_controle_preuve: typing.Union[MetaOapg.properties.statut_controle_preuve, str, schemas.Unset] = schemas.unset,
        etat_droit_acces: typing.Union[MetaOapg.properties.etat_droit_acces, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ListeAccesIn':
        return super().__new__(
            cls,
            *args,
            role_tiers=role_tiers,
            id_pce=id_pce,
            statut_controle_preuve=statut_controle_preuve,
            etat_droit_acces=etat_droit_acces,
            _configuration=_configuration,
            **kwargs,
        )
