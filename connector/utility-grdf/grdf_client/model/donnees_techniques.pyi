# coding: utf-8

"""
    API B2B ADICT V2

    Cette API vous permet de gérer vos droits d'accès aux données des PCE et de consulter leurs données contractuelles, techniques, de consommation publiées / informatives et d'injections publiées.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from grdf_client import schemas  # noqa: F401


class DonneesTechniques(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
        
            @staticmethod
            def situation_compteur() -> typing.Type['SituationCompteurDetail']:
                return SituationCompteurDetail
        
            @staticmethod
            def caracteristiques_compteur() -> typing.Type['CaracteristiquesCompteurDetail']:
                return CaracteristiquesCompteurDetail
        
            @staticmethod
            def pitd() -> typing.Type['PitdDetail']:
                return PitdDetail
            __annotations__ = {
                "situation_compteur": situation_compteur,
                "caracteristiques_compteur": caracteristiques_compteur,
                "pitd": pitd,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["situation_compteur"]) -> 'SituationCompteurDetail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["caracteristiques_compteur"]) -> 'CaracteristiquesCompteurDetail': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["pitd"]) -> 'PitdDetail': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["situation_compteur", "caracteristiques_compteur", "pitd", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["situation_compteur"]) -> typing.Union['SituationCompteurDetail', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["caracteristiques_compteur"]) -> typing.Union['CaracteristiquesCompteurDetail', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["pitd"]) -> typing.Union['PitdDetail', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["situation_compteur", "caracteristiques_compteur", "pitd", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        situation_compteur: typing.Union['SituationCompteurDetail', schemas.Unset] = schemas.unset,
        caracteristiques_compteur: typing.Union['CaracteristiquesCompteurDetail', schemas.Unset] = schemas.unset,
        pitd: typing.Union['PitdDetail', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'DonneesTechniques':
        return super().__new__(
            cls,
            *args,
            situation_compteur=situation_compteur,
            caracteristiques_compteur=caracteristiques_compteur,
            pitd=pitd,
            _configuration=_configuration,
            **kwargs,
        )

from grdf_client.model.caracteristiques_compteur_detail import CaracteristiquesCompteurDetail
from grdf_client.model.pitd_detail import PitdDetail
from grdf_client.model.situation_compteur_detail import SituationCompteurDetail
