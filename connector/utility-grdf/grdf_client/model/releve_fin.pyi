# coding: utf-8

"""
    API B2B ADICT V2

    Cette API vous permet de gérer vos droits d'accès aux données des PCE et de consulter leurs données contractuelles, techniques, de consommation publiées / informatives et d'injections publiées.  # noqa: E501

    The version of the OpenAPI document: v2
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from grdf_client import schemas  # noqa: F401


class ReleveFin(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """


    class MetaOapg:
        
        class properties:
            date_releve = schemas.DateSchema
            raison_releve = schemas.StrSchema
            libelle_raison_releve = schemas.StrSchema
            qualite_releve = schemas.StrSchema
            statut_releve = schemas.StrSchema
        
            @staticmethod
            def index_brut_fin() -> typing.Type['IndexBrutFin']:
                return IndexBrutFin
        
            @staticmethod
            def index_converti_fin() -> typing.Type['IndexConvertiFin']:
                return IndexConvertiFin
            __annotations__ = {
                "date_releve": date_releve,
                "raison_releve": raison_releve,
                "libelle_raison_releve": libelle_raison_releve,
                "qualite_releve": qualite_releve,
                "statut_releve": statut_releve,
                "index_brut_fin": index_brut_fin,
                "index_converti_fin": index_converti_fin,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["date_releve"]) -> MetaOapg.properties.date_releve: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["raison_releve"]) -> MetaOapg.properties.raison_releve: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["libelle_raison_releve"]) -> MetaOapg.properties.libelle_raison_releve: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["qualite_releve"]) -> MetaOapg.properties.qualite_releve: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["statut_releve"]) -> MetaOapg.properties.statut_releve: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["index_brut_fin"]) -> 'IndexBrutFin': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["index_converti_fin"]) -> 'IndexConvertiFin': ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["date_releve", "raison_releve", "libelle_raison_releve", "qualite_releve", "statut_releve", "index_brut_fin", "index_converti_fin", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["date_releve"]) -> typing.Union[MetaOapg.properties.date_releve, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["raison_releve"]) -> typing.Union[MetaOapg.properties.raison_releve, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["libelle_raison_releve"]) -> typing.Union[MetaOapg.properties.libelle_raison_releve, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["qualite_releve"]) -> typing.Union[MetaOapg.properties.qualite_releve, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["statut_releve"]) -> typing.Union[MetaOapg.properties.statut_releve, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["index_brut_fin"]) -> typing.Union['IndexBrutFin', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["index_converti_fin"]) -> typing.Union['IndexConvertiFin', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["date_releve", "raison_releve", "libelle_raison_releve", "qualite_releve", "statut_releve", "index_brut_fin", "index_converti_fin", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        date_releve: typing.Union[MetaOapg.properties.date_releve, str, date, schemas.Unset] = schemas.unset,
        raison_releve: typing.Union[MetaOapg.properties.raison_releve, str, schemas.Unset] = schemas.unset,
        libelle_raison_releve: typing.Union[MetaOapg.properties.libelle_raison_releve, str, schemas.Unset] = schemas.unset,
        qualite_releve: typing.Union[MetaOapg.properties.qualite_releve, str, schemas.Unset] = schemas.unset,
        statut_releve: typing.Union[MetaOapg.properties.statut_releve, str, schemas.Unset] = schemas.unset,
        index_brut_fin: typing.Union['IndexBrutFin', schemas.Unset] = schemas.unset,
        index_converti_fin: typing.Union['IndexConvertiFin', schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ReleveFin':
        return super().__new__(
            cls,
            *args,
            date_releve=date_releve,
            raison_releve=raison_releve,
            libelle_raison_releve=libelle_raison_releve,
            qualite_releve=qualite_releve,
            statut_releve=statut_releve,
            index_brut_fin=index_brut_fin,
            index_converti_fin=index_converti_fin,
            _configuration=_configuration,
            **kwargs,
        )

from grdf_client.model.index_brut_fin import IndexBrutFin
from grdf_client.model.index_converti_fin import IndexConvertiFin
